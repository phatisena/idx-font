<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="!OrbbegW8~!)/Q@fJBv+">mySprite</variable><variable type="KIND_SpriteKind" id="%tG1}{1ii0OaJk]2gSx8">Player</variable><variable type="KIND_SpriteKind" id="YeJpJli{qj=OG;qoa{@I">Projectile</variable><variable type="KIND_SpriteKind" id="{HQ+^0EDd;6qD8DT`ZG/">Food</variable><variable type="KIND_SpriteKind" id="5B:TR!fp`D*4a;D?SXtC">Enemy</variable></variables><block type="pxt-on-start" id="As]n@R=IzEyH-]G0fHV)" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="Pd_=gr`IUnTXDoce6qxD" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace idxfont {" line1="" line2="    let ligs: string[] = []; let ligages: Image[] = []; let ligwidth: number[] = []; let letterspace: number = 1;" line3="" line4="    export function drawTransparentImage(src: Image, to: Image, x: number, y: number) {" line5="        if (!src || !to) { return; }" line6="        to.drawTransparentImage(src, x, y)" line7="    }" line8="" line9="    export function findCommand(tvj: string, chj: string = &quot;&quot;, nvj: number): boolean {" line10="        if (((nvj &lt; tvj.length &amp;&amp; tvj.charAt(nvj)) &amp;&amp; (nvj + 1 &lt; tvj.length &amp;&amp; tvj.charAt(nvj + 1) == &quot;\\&quot;)) &amp;&amp; ((nvj + 2 &lt; tvj.length &amp;&amp; chj.length &lt;= 0) &amp;&amp; (nvj + 3 &lt; tvj.length &amp;&amp; tvj.charAt(nvj + 3) == &quot; &quot;))) { return true }" line11="        if (chj.length != 1) { return false }" line12="        if (((nvj &lt; tvj.length &amp;&amp; tvj.charAt(nvj) == &quot; &quot;) &amp;&amp; (nvj + 1 &lt; tvj.length &amp;&amp; tvj.charAt(nvj + 1) == &quot;\\&quot;)) &amp;&amp; ((nvj + 2 &lt; tvj.length &amp;&amp; tvj.charAt(nvj + 2) == chj) &amp;&amp; (nvj + 3 &lt; tvj.length &amp;&amp; tvj.charAt(nvj + 3) == &quot; &quot;))) { return true }" line13="        return false" line14="    }" line15="" line16="    export function runInParallel(handler: () =&gt; void) {" line17="        control.runInParallel(handler);      " line18="    }" line19="" line20="    //%blockid=ixfont_setcharecter" line21="    //%block=&quot;set $glyph to $imgi=screen_image_picker staying $notmove erase $bcol spacebar $scol&quot;" line22="    //%bcol.shadow=colorindexpicker" line23="    //%scol.shadow=colorindexpicker" line24="    //%group=&quot;create&quot;" line25="    export function setCharecter(glyph: string, imgi: Image, notmove: boolean, bcol: number, scol: number) {" line26="        let scnwidt = true; let scwidt = false; let wi = 0; let wj = 0; let si = 0; let imgj = image.create(imgi.width, imgi.height);" line27="        if (bcol &gt; 0 &amp;&amp; bcol &lt; 16) {" line28="            imgi.replace(bcol, 0)" line29="        }" line30="        for (let xw = 0; xw &lt; imgi.width; xw++) {" line31="            si = 0" line32="            for (let yh = 0; yh &lt; imgi.height; yh++) {" line33="                if (scnwidt &amp;&amp; (imgi.getPixel(xw, yh) != 0 || (scwidt &amp;&amp; imgi.getPixel(xw + 1, yh) != 0))) { si += 1 }" line34="            }" line35="            if (scnwidt) {" line36="                if (scwidt) {" line37="                    if (si &lt;= 0) { wj = xw; scnwidt = false; }" line38="                } else {" line39="                    if (si &gt; 0) { wi = xw; scwidt = true; }" line40="                }" line41="            }" line42="        }" line43="        if (scnwidt) { wj = imgi.width; scnwidt = false; }" line44="        imgj = image.create(Math.abs(wj - wi), imgi.height); drawTransparentImage(imgi, imgj, 0 - wi, 0);" line45="        if (scol &gt; 0 &amp;&amp; scol &lt; 16) {" line46="            imgj.replace(scol, 0)" line47="        }" line48="        if (ligs.indexOf(glyph) &lt; 0) {" line49="            ligs.push(glyph); ligages.push(imgj);" line50="            if (notmove) {" line51="                ligwidth.push(0)" line52="            } else {" line53="                ligwidth.push(imgj.width)" line54="            }" line55="        } else {" line56="            ligages[ligs.indexOf(glyph)] = imgj" line57="            if (notmove) {" line58="                ligwidth[ligs.indexOf(glyph)] = 0" line59="            } else {" line60="                ligwidth[ligs.indexOf(glyph)] = imgj.width" line61="            }" line62="        }" line63="    }" line64="" line65="    //%blockid=ixfont_setcharfromimgsheet" line66="    //%block=&quot;set $PngSheet=screen_image_picker with $GroupChar staying char $StayChar w $twid h $thei bcol $bcl scol $scl&quot;" line67="    //%bcl.shadow=colorindexpicker" line68="    //%scl.shadow=colorindexpicker" line69="    //%group=&quot;create&quot;" line70="    export function setCharFromSheet(PngSheet: Image, GroupChar: string, StayChar: string, twid: number, thei: number, bcl: number, scl: number) {" line71="        let gwid = Math.round(PngSheet.width / twid); let uig = image.create(twid, thei); let txi = 0; let tyi = 0;" line72="        for (let tvn = 0; tvn &lt; GroupChar.length; tvn++) {" line73="            uig = image.create(twid, thei); txi = twid * (tvn % gwid); tyi = thei * Math.floor(tvn / gwid); drawTransparentImage(PngSheet, uig, 0 - txi, 0 - tyi); setCharecter(GroupChar.charAt(tvn), uig, StayChar.includes(GroupChar.charAt(tvn)), bcl, scl);" line74="        }" line75="    }" line76="" line77="    //%blockid=ixfont_numofglyphs" line78="    //%block=&quot;number of glyphs&quot;" line79="    //%group=&quot;datainfo&quot;" line80="    export function NumOfGlyphs(): number {" line81="        return ligs.length" line82="    }" line83="" line84="    //%blockid=ixfont_arrofgypimg" line85="    //%block=&quot;array of glyph images&quot;" line86="    //%group=&quot;datainfo&quot;" line87="    export function ImageArray(): Image[] {" line88="        return ligages" line89="    }" line90="" line91="    //%blockid=ixfont_arrofglyphs" line92="    //%block=&quot;array of glyphs&quot;" line93="    //%group=&quot;datainfo&quot;" line94="    export function GlyphArray(): String[] {" line95="        return ligs" line96="    }" line97="" line98="    //%blockid=ixfont_setimgfromtext" line99="    //%block=&quot;create the image of $input in $iwidt and fill $icol&quot;" line100="    //%icol.shadow=colorindexpicker" line101="    //%group=&quot;render&quot;" line102="    export function SetImage(input: string, iwidt: number, icol: number) {" line103="        let heig = 0; let widt = 0; let curwidt = 0; let uwidt = 0; let swidt = 0; let nwidt = 0; let wie = 0; let hie = 0; let hvi = 0;" line104="        for (let currentletter = 0; currentletter &lt; input.length; currentletter++) {" line105="            if (!(ligs.indexOf(input.charAt(currentletter)) &lt; 0)) {" line106="                uwidt = ligwidth[(ligs.indexOf(input.charAt(currentletter)))]" line107="                if (ligwidth[(ligs.indexOf(input.charAt(currentletter)))] &lt;= 0) {" line108="                    nwidt = ligages[(ligs.indexOf(input.charAt(currentletter)))].width" line109="                } else {" line110="                    nwidt = 0" line111="                }" line112="                if (uwidt &gt; 0) {" line113="                    swidt = uwidt" line114="                } else {" line115="                    swidt = 0" line116="                }" line117="                if (ligwidth[(ligs.indexOf(input.charAt(currentletter)))] &gt; 0) {" line118="                    wie += Math.abs(uwidt - nwidt)" line119="                }" line120="                if (ligwidth[(ligs.indexOf(input.charAt(Math.min(currentletter + 1, input.length - 1))))] &gt; 0) {" line121="                    wie += letterspace" line122="                }" line123="                hvi = hie + ligages[(ligs.indexOf(input.charAt(currentletter)))].height; heig = Math.max(heig, hvi);" line124="                if (iwidt &gt; 0) {" line125="                    if (wie &gt;= iwidt || findCommand(input, &quot;n&quot;, currentletter)) {" line126="                        hie += ligages[(ligs.indexOf(input.charAt(currentletter)))].height; wie = 0;" line127="                        if (findCommand(input, &quot;n&quot;, currentletter)) {" line128="                            currentletter += 3" line129="                        }" line130="                    }" line131="                } else if (findCommand(input, &quot;n&quot;, currentletter)) {" line132="                    currentletter += 3" line133="                }" line134="            }" line135="        }" line136="        wie = 0; widt = 0;" line137="        for (let currentletter2 = 0; currentletter2 &lt; input.length; currentletter2++) {" line138="            if (!(ligs.indexOf(input.charAt(currentletter2)) &lt; 0)) {" line139="                uwidt = ligwidth[(ligs.indexOf(input.charAt(currentletter2)))]" line140="                if (ligwidth[(ligs.indexOf(input.charAt(currentletter2)))] &lt;= 0) {" line141="                    nwidt = ligages[(ligs.indexOf(input.charAt(currentletter2)))].width" line142="                } else {" line143="                    nwidt = 0" line144="                }" line145="                if (ligwidth[(ligs.indexOf(input.charAt(Math.min(currentletter2 + 1, input.length - 1))))] &lt;= 0) {" line146="                    swidt = uwidt" line147="                } else {" line148="                    swidt = 0" line149="                }" line150="                if (ligwidth[(ligs.indexOf(input.charAt(currentletter2)))] &gt; 0) {" line151="                    wie += Math.abs(uwidt - nwidt)" line152="                }" line153="                if (ligwidth[(ligs.indexOf(input.charAt(Math.min(currentletter2 + 1, input.length - 1))))] &gt; 0) {" line154="                    wie += letterspace" line155="                }" line156="            } else if (input.charAt(currentletter2) == &quot; &quot;) {" line157="                wie += 3 * letterspace" line158="            }" line159="            widt = Math.max(widt, wie)" line160="            if (iwidt &gt; 0) {" line161="                if (wie &gt;= iwidt || findCommand(input, &quot;n&quot;, currentletter2)) {" line162="                    wie = 0" line163="                    if (findCommand(input, &quot;n&quot;, currentletter2)) {" line164="                        currentletter2 += 3" line165="                    }" line166="                }" line167="            } else if (findCommand(input, &quot;n&quot;, currentletter2)) {" line168="                currentletter2 += 3" line169="            }" line170="        }" line171="        let output = image.create(widt, heig); hie = 0; wie = 0; curwidt = 0;" line172="        for (let currentletter3 = 0; currentletter3 &lt; input.length; currentletter3++) {" line173="            if (!(ligs.indexOf(input.charAt(currentletter3)) &lt; 0)) {" line174="                hvi = ligages[(ligs.indexOf(input.charAt(currentletter3)))].height; uwidt = ligwidth[(ligs.indexOf(input.charAt(currentletter3)))];" line175="                if (ligwidth[(ligs.indexOf(input.charAt(currentletter3)))] &lt;= 0) {" line176="                    nwidt = ligages[(ligs.indexOf(input.charAt(currentletter3)))].width" line177="                } else {" line178="                    nwidt = 0" line179="                }" line180="                drawTransparentImage(ligages[(ligs.indexOf(input.charAt(currentletter3)))], output, curwidt - nwidt, hie + (hvi - ligages[(ligs.indexOf(input.charAt(currentletter3)))].height))" line181="                if (ligwidth[(ligs.indexOf(input.charAt(Math.min(currentletter3 + 1, input.length - 1))))] == 0) {" line182="                    swidt = uwidt" line183="                } else {" line184="                    swidt = 0" line185="                }" line186="                if (ligwidth[(ligs.indexOf(input.charAt(currentletter3)))] &gt; 0) {" line187="                    curwidt += Math.abs(uwidt - nwidt)" line188="                }" line189="                if (ligwidth[(ligs.indexOf(input.charAt(Math.min(currentletter3 + 1, input.length - 1))))] &gt; 0) {" line190="                    curwidt += letterspace" line191="                }" line192="            } else if (input.charAt(currentletter3) == &quot; &quot;) {" line193="                curwidt += 3 * letterspace" line194="            }" line195="            if (ligwidth[(ligs.indexOf(input.charAt(Math.min(currentletter3 + 1, input.length - 1))))] &gt; 0) {" line196="                if (iwidt &gt; 0) {" line197="                    if (curwidt &gt;= iwidt || findCommand(input, &quot;n&quot;, currentletter3)) {" line198="                        curwidt = 0; hie += hvi;" line199="                        if (findCommand(input, &quot;n&quot;, currentletter3)) {" line200="                            currentletter3 += 3" line201="                        }" line202="                    }" line203="                } else if (findCommand(input, &quot;n&quot;, currentletter3)) {" line204="                    currentletter3 += 3" line205="                }" line206="            }" line207="        }" line208="        if (icol &gt; 0) {" line209="            for (let ico = 0; ico &lt; 16; ico++) {" line210="                if (ico &gt; 0) {" line211="                    output.replace(ico, icol)" line212="                }" line213="            }" line214="        }" line215="        return output" line216="    }" line217="" line218="    //%blockid=ixfont_setletterspacing" line219="    //%block=&quot;set letter spacing to $input&quot;" line220="    //%group=&quot;modify&quot;" line221="    export function SetSpace(input: number) {" line222="        letterspace = input" line223="    }" line224="" line225="    //%blockid=ixfont_changeletterspacing" line226="    //%block=&quot;change letter spacing by $input&quot;" line227="    //%group=&quot;modify&quot;" line228="    export function ChangeSpace(input: number) {" line229="        letterspace += input" line230="    }" line231="" line232="" line233="}" numlines="234"></mutation></block></statement></block></xml>