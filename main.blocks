<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" x="10" y="10"><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace idxfont {" line1="" line2="    let ligs: string[][] = []; let ligages: Image[][] = []; let ligwidth: number[][] = []; let ligdir: number[][] = []; let ligcol: number[][] = []; let ligul: number[][] = []; let storeid: number[] = []; let letterspace: number = 1; let curid = 0;" line3="    " line4="    export function newtableid() {" line5="        storeid.push(curid); ligs.push([]); ligages.push([]); ligwidth.push([]); ligdir.push([]); ligcol.push([]); ligul.push([]); curid += 1; return storeid.length - 1;" line6="    }" line7="" line8="    export function drawTransparentImage(src: Image, to: Image, x: number, y: number) {" line9="        if (!src || !to) { return; }" line10="        to.drawTransparentImage(src, x, y)" line11="    }" line12="" line13="    export function findCommand(tvj: string, chj: string = &quot;&quot;, nvj: number): boolean {" line14="        if (((nvj &lt; tvj.length &amp;&amp; tvj.charAt(nvj)) &amp;&amp; (nvj + 1 &lt; tvj.length &amp;&amp; tvj.charAt(nvj + 1) == &quot;\\&quot;)) &amp;&amp; ((nvj + 2 &lt; tvj.length &amp;&amp; chj.length &lt;= 0) &amp;&amp; (nvj + 3 &lt; tvj.length &amp;&amp; tvj.charAt(nvj + 3) == &quot; &quot;))) { return true }" line15="        if (chj.length != 1) { return false }" line16="        if (((nvj &lt; tvj.length &amp;&amp; tvj.charAt(nvj) == &quot; &quot;) &amp;&amp; (nvj + 1 &lt; tvj.length &amp;&amp; tvj.charAt(nvj + 1) == &quot;\\&quot;)) &amp;&amp; ((nvj + 2 &lt; tvj.length &amp;&amp; tvj.charAt(nvj + 2) == chj) &amp;&amp; (nvj + 3 &lt; tvj.length &amp;&amp; tvj.charAt(nvj + 3) == &quot; &quot;))) { return true }" line17="        return false" line18="    }" line19="" line20="    export function runInParallel(handler: () =&gt; void) {" line21="        control.runInParallel(handler);      " line22="    }" line23="" line24="    //%blockid=ixfont_setcharecter" line25="    //%block=&quot;set table id $gid and set letter $glyph to img $imgi=screen_image_picker and the letter can move? $notmove and stay on or under the letter? $onthechar erase col $bcol spacebar col $scol base col $mcol guard col $ncol&quot;" line26="    //%bcol.shadow=colorindexpicker" line27="    //%scol.shadow=colorindexpicker" line28="    //%mcol.shadow=colorindexpicker" line29="    //%ncol.shadow=colorindexpicker" line30="    //%group=&quot;create&quot;" line31="    export function setCharecter(gid: number,glyph: string, imgi: Image, notmove: boolean, onthechar: boolean, bcol: number, scol: number, mcol: number, ncol: number) {" line32="        let tid = 0" line33="        if (storeid.indexOf(gid) &lt; 0) {" line34="            tid = newtableid()" line35="        } else {" line36="            tid = gid" line37="        }" line38="        " line39="        let sncol = true  ;let scnwidt = true; let scwidt = false; let wi = 0; let wj = 0; let si = 0; let imgj = image.create(imgi.width, imgi.height);" line40="        if (bcol &gt; 0 &amp;&amp; bcol &lt; 16) {" line41="            imgi.replace(bcol, 0)" line42="        }" line43="        for (let xw = 0; xw &lt; imgi.width; xw++) {" line44="            si = 0" line45="            for (let yh = 0; yh &lt; imgi.height; yh++) {" line46="                if (imgi.getPixel(xw, yh) != 0 || (scwidt &amp;&amp; imgi.getPixel(xw + 1, yh) != 0)) { si += 1 }" line47="            }" line48="            if (scnwidt) {" line49="                if (scwidt) {" line50="                    if (si &lt;= 0) { wj = xw; scnwidt = false; }" line51="                } else {" line52="                    if (si &gt; 0) { wi = xw; scwidt = true; }" line53="                }" line54="            }" line55="        }" line56="        if (scnwidt) { wj = imgi.width; scnwidt = false; }" line57="        imgj = image.create(Math.abs(wj - wi), imgi.height); drawTransparentImage(imgi, imgj, 0 - wi, 0);" line58="        if (scol &gt; 0 &amp;&amp; scol &lt; 16) {" line59="            imgj.replace(scol, 0)" line60="        }" line61="        if (ligs[tid].indexOf(glyph) &lt; 0) {" line62="            ligul[tid].push(ncol)" line63="            ligcol[tid].push(mcol)" line64="            ligs[tid].push(glyph); ligages[tid].push(imgj);" line65="            if (notmove) {" line66="                if (onthechar) {" line67="                    ligdir[tid].push(10)" line68="                } else {" line69="                    ligdir[tid].push(-10)" line70="                }" line71="                ligwidth[tid].push(0)" line72="            } else {" line73="                ligwidth[tid].push(imgj.width)" line74="                ligdir[tid].push(0)" line75="            }" line76="        } else {" line77="            ligul[tid][ligs[tid].indexOf(glyph)] = ncol" line78="            ligcol[tid][ligs[tid].indexOf(glyph)] = mcol" line79="            ligages[tid][ligs[tid].indexOf(glyph)] = imgj" line80="            if (notmove) {" line81="                if (onthechar) {" line82="                    ligdir[tid][ligs[tid].indexOf(glyph)] = 10" line83="                } else {" line84="                    ligdir[tid][ligs[tid].indexOf(glyph)] = -10" line85="                }" line86="                ligwidth[tid][ligs[tid].indexOf(glyph)] = 0" line87="            } else {" line88="                ligwidth[tid][ligs[tid].indexOf(glyph)] = imgj.width" line89="                ligdir[tid][ligs[tid].indexOf(glyph)] = 0" line90="            }" line91="        }" line92="    }" line93="" line94="    //%blockid=ixfont_setcharfromimgsheet" line95="    //%block=&quot;set table id $tid and set img sheet $PngSheet=screen_image_picker with letters $GroupChar staying letters $StayChar letters on the letters $CharOnChar width $twid height $thei erase col $bcl space col $scl base col $mcl guard col $ncl&quot;" line96="    //%bcl.shadow=colorindexpicker" line97="    //%scl.shadow=colorindexpicker" line98="    //%mcl.shadow=colorindexpicker" line99="    //%ncl.shadow=colorindexpicker" line100="    //%group=&quot;create&quot;" line101="    export function setCharFromSheet(tid: number, PngSheet: Image, GroupChar: string, StayChar: string, CharOnChar: string, twid: number, thei: number, bcl: number, scl: number, mcl: number, ncl: number) {" line102="        let gwid = Math.round(PngSheet.width / twid); let uig = image.create(twid, thei); let txi = 0; let tyi = 0;" line103="        for (let tvn = 0; tvn &lt; GroupChar.length; tvn++) {" line104="            uig = image.create(twid, thei); txi = twid * (tvn % gwid); tyi = thei * Math.floor(tvn / gwid); drawTransparentImage(PngSheet, uig, 0 - txi, 0 - tyi); setCharecter(tid, GroupChar.charAt(tvn), uig, StayChar.includes(GroupChar.charAt(tvn)),CharOnChar.includes(GroupChar.charAt(tvn)), bcl, scl, mcl, ncl);" line105="        }" line106="    }" line107="" line108="    //%blockid=ixfont_numofglyphs" line109="    //%block=&quot;number of glyphs in table id $tid&quot;" line110="    //%group=&quot;datainfo&quot;" line111="    export function NumOfGlyphs(tid: number): number {" line112="        return ligs[tid].length" line113="    }" line114="" line115="    //%blockid=ixfont_arrofgypimg" line116="    //%block=&quot;array of glyph images in table id $tid&quot;" line117="    //%group=&quot;datainfo&quot;" line118="    export function ImageArray(tid: number): Image[] {" line119="        return ligages[tid]" line120="    }" line121="" line122="    //%blockid=ixfont_arrofglyphs" line123="    //%block=&quot;array of glyphs in table id $tid&quot;" line124="    //%group=&quot;datainfo&quot;" line125="    export function GlyphArray(tid: number): String[] {" line126="        return ligs[tid]" line127="    }" line128="" line129="    //%blockid=ixfont_setimgfromtext" line130="    //%block=&quot;create the image of text $input in page width $iwidt from table id $tid and fill col $icol&quot;" line131="    //%icol.shadow=colorindexpicker" line132="    //%group=&quot;render&quot;" line133="    export function SetImage(input: string, iwidt: number,tid: number, icol: number) {" line134="        let heig = 0; let widt = 0; let curwidt = 0; let uwidt = 0; let swidt = 0; let nwidt = 0; let wie = 0; let hie = 0; let hvi = 0;" line135="        for (let currentletter = 0; currentletter &lt; input.length; currentletter++) {" line136="            if (!(ligs[tid].indexOf(input.charAt(currentletter)) &lt; 0)) {" line137="                uwidt = ligwidth[tid][(ligs[tid].indexOf(input.charAt(currentletter)))]" line138="                if (ligwidth[tid][(ligs[tid].indexOf(input.charAt(currentletter)))] &lt;= 0) {" line139="                    nwidt = ligages[tid][(ligs[tid].indexOf(input.charAt(currentletter)))].width" line140="                } else {" line141="                    nwidt = 0" line142="                }" line143="                if (uwidt &gt; 0) {" line144="                    swidt = uwidt" line145="                } else {" line146="                    swidt = 0" line147="                }" line148="                if (ligwidth[tid][(ligs[tid].indexOf(input.charAt(currentletter)))] &gt; 0) {" line149="                    wie += Math.abs(uwidt - nwidt)" line150="                }" line151="                if (ligwidth[tid][(ligs[tid].indexOf(input.charAt(Math.min(currentletter + 1, input.length - 1))))] &gt; 0) {" line152="                    wie += letterspace" line153="                }" line154="                hvi = ligages[tid][(ligs[tid].indexOf(input.charAt(currentletter)))].height" line155="            } else if (input.charAt(currentletter) == &quot; &quot;) {" line156="                wie += 3 * letterspace" line157="            } else {" line158="                wie += 2 * letterspace" line159="            }" line160="            heig = Math.max(heig, hie + hvi)" line161="            if (iwidt &gt; 0) {" line162="                if (wie &gt;= iwidt || findCommand(input, &quot;n&quot;, currentletter)) {" line163="                    hie += hvi; wie = 0;" line164="                    if (findCommand(input, &quot;n&quot;, currentletter)) {" line165="                        currentletter += 3" line166="                    }" line167="                }" line168="            } else if (findCommand(input, &quot;n&quot;, currentletter)) {" line169="                    currentletter += 3" line170="            }" line171="        }" line172="        wie = 0; widt = 0;" line173="        for (let currentletter2 = 0; currentletter2 &lt; input.length; currentletter2++) {" line174="            if (!(ligs[tid].indexOf(input.charAt(currentletter2)) &lt; 0)) {" line175="                uwidt = ligwidth[tid][(ligs[tid].indexOf(input.charAt(currentletter2)))]" line176="                if (ligwidth[tid][(ligs[tid].indexOf(input.charAt(currentletter2)))] &lt;= 0) {" line177="                    nwidt = ligages[tid][(ligs[tid].indexOf(input.charAt(currentletter2)))].width" line178="                } else {" line179="                    nwidt = 0" line180="                }" line181="                if (ligwidth[tid][(ligs[tid].indexOf(input.charAt(Math.min(currentletter2 + 1, input.length - 1))))] &lt;= 0) {" line182="                    swidt = uwidt" line183="                } else {" line184="                    swidt = 0" line185="                }" line186="                if (ligwidth[tid][(ligs[tid].indexOf(input.charAt(currentletter2)))] &gt; 0) {" line187="                    wie += Math.abs(uwidt - nwidt)" line188="                }" line189="                if (ligwidth[tid][(ligs[tid].indexOf(input.charAt(Math.min(currentletter2 + 1, input.length - 1))))] &gt; 0) {" line190="                    wie += letterspace" line191="                }" line192="            } else if (input.charAt(currentletter2) == &quot; &quot;) {" line193="                wie += 3 * letterspace" line194="            } else {" line195="                wie += 2 * letterspace" line196="            }" line197="            widt = Math.max(widt, wie)" line198="            if (iwidt &gt; 0) {" line199="                if (wie &gt;= iwidt || findCommand(input, &quot;n&quot;, currentletter2)) {" line200="                    wie = 0" line201="                    if (findCommand(input, &quot;n&quot;, currentletter2)) {" line202="                        currentletter2 += 3" line203="                    }" line204="                }" line205="            } else if (findCommand(input, &quot;n&quot;, currentletter2)) {" line206="                currentletter2 += 3" line207="            }" line208="        }" line209="        let scwidt2 = true;  let underc = false; let sc = 0; let scnwidt2 = false; let rimg = image.create(8, 8); let output = image.create(widt, heig); hie = 0; wie = 0; curwidt = 0;" line210="        for (let currentletter3 = 0; currentletter3 &lt; input.length; currentletter3++) {" line211="            wie = 0" line212="            if (!(ligs[tid].indexOf(input.charAt(currentletter3)) &lt; 0)) {" line213="                hvi = ligages[tid][(ligs[tid].indexOf(input.charAt(currentletter3)))].height; uwidt = ligwidth[tid][(ligs[tid].indexOf(input.charAt(currentletter3)))];" line214="                if (ligwidth[tid][(ligs[tid].indexOf(input.charAt(currentletter3)))] &lt;= 0) {" line215="                    nwidt = ligages[tid][(ligs[tid].indexOf(input.charAt(currentletter3)))].width" line216="                } else {" line217="                    nwidt = 0" line218="                }" line219="                scwidt2 = false; scnwidt2 = false; wie = 0; rimg = ligages[tid][(ligs[tid].indexOf(input.charAt(currentletter3)))].clone(); let ccol = ligul[tid][ligs[tid].indexOf(input.charAt(currentletter3))];" line220="                if (ligwidth[tid][ligs[tid].indexOf(input.charAt(Math.min(currentletter3 + 1, input.length - 1)))] &gt; 0 &amp;&amp; ligdir[tid][ligs[tid].indexOf(input.charAt(Math.min(currentletter3 + 1, input.length - 1)))] == 0) {" line221="                    rimg.replace(ccol, ligcol[tid][ligs[tid].indexOf(input.charAt(currentletter3))])" line222="                } else if (ligwidth[tid][ligs[tid].indexOf(input.charAt(currentletter3))] &gt; 0 &amp;&amp; ligdir[tid][ligs[tid].indexOf(input.charAt(Math.min(currentletter3 + 1, input.length - 1)))] &lt; 0) {" line223="                    rimg.replace(ccol, 0)" line224="                } else if (ligwidth[tid][ligs[tid].indexOf(input.charAt(currentletter3))] &gt; 0 &amp;&amp; ligdir[tid][ligs[tid].indexOf(input.charAt(Math.min(currentletter3 + 1, input.length - 1)))] &gt; 0) {" line225="                    rimg.replace(ccol, ligcol[tid][ligs[tid].indexOf(input.charAt(currentletter3))])" line226="                }" line227="                if (Math.abs(ligdir[tid][ligs[tid].indexOf(input.charAt(currentletter3))]) &gt; 0 &amp;&amp; Math.abs(ligdir[tid][ligs[tid].indexOf(input.charAt(Math.max(currentletter3 - 1, 0)))]) == 0) {" line228="                    sc = 1; wie = 0;" line229="                    while (sc &gt; 0) {" line230="                        sc = 0" line231="                        for (let yh2 = 0; yh2 &lt; rimg.height; yh2++) {" line232="                            if (output.getPixel((curwidt - letterspace) - wie, hie + yh2) == rimg.getPixel(rimg.width - 1, yh2) &amp;&amp; (output.getPixel((curwidt - letterspace) - wie, hie + yh2) != 0 &amp;&amp; output.getPixel((curwidt - letterspace) - wie, hie + yh2) != 0)) {" line233="                                sc += 1" line234="                            }" line235="                        }" line236="                        if (sc &gt; 0 || (sc == 0 &amp;&amp; wie &gt; 0)) {" line237="                            wie += 1" line238="                        }" line239="                    }" line240="                }" line241="                if (wie != 0) { wie = Math.abs(wie) }" line242="                drawTransparentImage( rimg, output, curwidt - (nwidt + wie), hie + (hvi - ligages[tid][(ligs[tid].indexOf(input.charAt(currentletter3)))].height))" line243="                if (ligwidth[tid][(ligs[tid].indexOf(input.charAt(Math.min(currentletter3 + 1, input.length - 1))))] == 0) {" line244="                    swidt = uwidt" line245="                } else {" line246="                    swidt = 0" line247="                }" line248="                if (ligwidth[tid][(ligs[tid].indexOf(input.charAt(currentletter3)))] &gt; 0) {" line249="                    curwidt += Math.abs(uwidt - nwidt)" line250="                }" line251="                if (ligwidth[tid][(ligs[tid].indexOf(input.charAt(Math.min(currentletter3 + 1, input.length - 1))))] &gt; 0) {" line252="                    curwidt += letterspace" line253="                }" line254="            } else if (input.charAt(currentletter3) == &quot; &quot;) {" line255="                curwidt += 3 * letterspace" line256="            } else {" line257="                curwidt += 2 * letterspace" line258="            }" line259="            if (iwidt &gt; 0) {" line260="                if (curwidt &gt;= iwidt || findCommand(input, &quot;n&quot;, currentletter3)) {" line261="                    curwidt = 0; hie += hvi;" line262="                    if (findCommand(input, &quot;n&quot;, currentletter3)) {" line263="                        currentletter3 += 3" line264="                    }" line265="                }" line266="            } else if (findCommand(input, &quot;n&quot;, currentletter3)) {" line267="                currentletter3 += 3" line268="            }" line269="        }" line270="        if (icol &gt; 0) {" line271="            for (let ico = 1; ico &lt; 16; ico++) {" line272="                output.replace(ico, icol)" line273="            }" line274="        }" line275="        return output" line276="    }" line277="" line278="    //%blockid=ixfont_setletterspacing" line279="    //%block=&quot;set letter spacing to $input&quot;" line280="    //%group=&quot;modify&quot;" line281="    export function SetSpace(input: number) {" line282="        letterspace = input" line283="    }" line284="" line285="    //%blockid=ixfont_changeletterspacing" line286="    //%block=&quot;change letter spacing by $input&quot;" line287="    //%group=&quot;modify&quot;" line288="    export function ChangeSpace(input: number) {" line289="        letterspace += input" line290="    }" line291="" line292="" line293="    SetSpace(1)" line294="    setCharFromSheet(" line295="    0," line296="    assets.image`myImage1`," line297="    &quot;§!\&quot;#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°©®&quot;," line298="    &quot;&quot;," line299="    &quot;&quot;," line300="    8," line301="    16," line302="    1," line303="    0," line304="    15," line305="    3" line306="    )" line307="    setCharFromSheet(" line308="    0," line309="    assets.image`myImage2`," line310="    &quot;กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรลวศษสหฬอฮะาเแโใไฤฦๅั็ํิีึืุู์่้๊๋ำ฿๐๑๒๓๔๕๖๗๘๙&quot;," line311="    &quot;ั็ํิีึืุู์่้๊๋&quot;," line312="    &quot;ั็ํิีึื์่้๊๋&quot;," line313="    8," line314="    16," line315="    1," line316="    0," line317="    15," line318="    3" line319="    )" line320="}" numlines="321"></mutation></block></statement></block></xml>